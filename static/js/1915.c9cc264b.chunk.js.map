{"version":3,"file":"static/js/1915.c9cc264b.chunk.js","mappings":"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","sources":["views/dashboard/Dashboard.js"],"sourcesContent":["/* eslint-disable prettier/prettier */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState, Fragment } from 'react'\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n  CForm,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n  CFormInput,\n  CFormSelect,\n} from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport CIcon from '@coreui/icons-react'\nimport { cilCloudDownload } from '@coreui/icons'\nimport axios from 'axios'\nimport mqtt from 'mqtt'\n\nconst options = {\n  protocol: 'ws',\n  username: 'VyKing',\n  password: 'aio_wpjy56mtIGJ3eImGS185kQx4QsPj',\n  keepalive: 20,\n  // clientId uniquely identifies client\n  // choose any string you wish\n  clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\n}\nconst client = mqtt.connect('ws://io.adafruit.com:443', options)\n\nclient.subscribe('VyKing/feeds/temperature')\nclient.subscribe('VyKing/feeds/soilMoisture')\nclient.subscribe('VyKing/feeds/humidity')\n\nconst Dashboard = () => {\n  const apiKey = 'aio_wpjy56mtIGJ3eImGS185kQx4QsPj'\n  var note\n\n  // Sets default React state\n  const [currentTemp, setTemp] = useState(\n    <Fragment>\n      <em>...</em>\n    </Fragment>,\n  )\n  const [currentHumi, setHumi] = useState(\n    <Fragment>\n      <em>...</em>\n    </Fragment>,\n  )\n  const [currentSoil, setSoil] = useState(\n    <Fragment>\n      <em>...</em>\n    </Fragment>,\n  )\n\n  const [tempD, setTempD] = useState([])\n  const [soilD, setSoilD] = useState([])\n  const [humiD, setHumiD] = useState([])\n\n  client.on('message', function (topic, message) {\n    note = message.toString()\n    // Updates React state with message\n    if (topic === 'VyKing/feeds/temperature') {\n      setTemp(note)\n    }\n    if (topic === 'VyKing/feeds/soilMoisture') {\n      setSoil(note)\n    }\n    if (topic === 'VyKing/feeds/humidity') {\n      setHumi(note)\n    }\n    console.log(topic)\n  })\n  const fetchData = (url, receiver, topic) => {\n    // Gọi API và nhận dữ liệu\n    // Ví dụ sử dụng axios\n    axios\n      .get(url, {\n        headers: {\n          'X-AIO-Key': apiKey,\n        },\n      })\n      .then((response) => {\n        if (topic === 'temp') {\n          setTemp(response.data[0]?.value)\n        }\n        if (topic === 'soil') {\n          setSoil(response.data[0]?.value)\n        }\n        if (topic === 'humi') {\n          setHumi(response.data[0]?.value)\n        }\n        receiver(response.data.reverse())\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n  }\n  const publish = (topic, payload) => {\n    client.publish(topic, payload, (err) => {\n      if (err) {\n        console.error('Publish error:', err)\n      } else {\n        console.log(`Sent data to ${topic}:`, payload)\n      }\n    })\n  }\n\n  useEffect(() => {\n    fetchData('https://io.adafruit.com/api/v2/VyKing/feeds/temperature/data', setTempD, 'temp')\n    fetchData('https://io.adafruit.com/api/v2/VyKing/feeds/soilmoisture/data', setSoilD, 'soil')\n    fetchData('https://io.adafruit.com/api/v2/VyKing/feeds/humidity/data', setHumiD, 'humi')\n  }, [currentTemp, currentHumi, currentSoil])\n  const date = new Date()\n\n  const [input1, setInput1] = useState('')\n  const [input2, setInput2] = useState('')\n\n  const handleInputChange1 = (e) => {\n    setInput1(e.target.value)\n  }\n\n  const handleInputChange2 = (e) => {\n    setInput2(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setInput1('')\n    setInput2('')\n    // Tạo một đối tượng dữ liệu để gửi đi\n    const dataToSend = `${input1} ${input2}`\n\n    // Gửi dữ liệu bằng Axios\n    publish('VyKing/feeds/co', dataToSend)\n  }\n\n  return (\n    <>\n      <h3>Pump control</h3>\n      <CForm\n        className=\"row row-cols-lg-auto g-3 align-items-center\"\n        style={{ paddingBottom: '20px', paddingTop: '20px' }}\n      >\n        <CCol xs={12}>\n          <CFormLabel className=\"visually-hidden\" htmlFor=\"inlineFormInputGroupUsername\">\n            Count down\n          </CFormLabel>\n          <CInputGroup>\n            <CInputGroupText>@</CInputGroupText>\n            <CFormInput\n              id=\"inlineFormInputGroupUsername\"\n              placeholder=\"Count down\"\n              value={input1}\n              onChange={handleInputChange1}\n            />\n          </CInputGroup>\n        </CCol>\n\n        <CCol xs={12}>\n          <CFormLabel className=\"visually-hidden\" htmlFor=\"inlineFormInputGroupUsername\">\n            Active\n          </CFormLabel>\n          <CInputGroup>\n            <CInputGroupText>@</CInputGroupText>\n            <CFormInput\n              id=\"inlineFormInputGroupUsername\"\n              placeholder=\"Active\"\n              value={input2}\n              onChange={handleInputChange2}\n            />\n          </CInputGroup>\n        </CCol>\n\n        <CCol xs={12}>\n          <CButton type=\"submit\" onClick={handleSubmit}>\n            Submit\n          </CButton>\n        </CCol>\n      </CForm>\n      <CCard className=\"mb-4\" key={0}>\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                {tempD[0]?.feed_key} {currentTemp}\n              </h4>\n              <div className=\"small text-medium-emphasis\">{date.toString().substring(0, 10)}</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: tempD?.map((temp) => {\n                return temp.created_at.substring(0, 10)\n              }),\n              datasets: [\n                {\n                  label: 'Temperature',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: tempD?.map((temp) => {\n                    return temp.value\n                  }),\n                  fill: true,\n                },\n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 20,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 10,\n                    stepSize: Math.ceil(5),\n                    max: 120,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n        </CCardBody>\n      </CCard>\n\n      <CCard className=\"mb-4\" key={1}>\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                {humiD[0]?.feed_key} {currentHumi}\n              </h4>\n              <div className=\"small text-medium-emphasis\">{date.toString().substring(0, 10)}</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: humiD.map((temp) => {\n                return temp.created_at.substring(0, 10)\n              }),\n              datasets: [\n                {\n                  label: 'Temperature',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: humiD.map((temp) => {\n                    return temp.value\n                  }),\n                  fill: true,\n                },\n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 20,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 10,\n                    stepSize: Math.ceil(5),\n                    max: 120,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n        </CCardBody>\n      </CCard>\n\n      <CCard className=\"mb-4\" key={2}>\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                {soilD[0]?.feed_key} {currentSoil}\n              </h4>\n              <div className=\"small text-medium-emphasis\">{date.toString().substring(0, 10)}</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: soilD.map((temp) => {\n                return temp.created_at.substring(0, 10)\n              }),\n              datasets: [\n                {\n                  label: 'Temperature',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: soilD.map((temp) => {\n                    return temp.value\n                  }),\n                  fill: true,\n                },\n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 20,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 10,\n                    stepSize: Math.ceil(5),\n                    max: 120,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Dashboard\n"],"names":["options","protocol","username","password","keepalive","clientId","Math","random","toString","substr","client","mqtt","connect","subscribe","Dashboard","_tempD$","_humiD$","_soilD$","note","currentTemp","setTemp","useState","_jsx","Fragment","children","currentHumi","setHumi","currentSoil","setSoil","tempD","setTempD","soilD","setSoilD","humiD","setHumiD","on","topic","message","console","log","fetchData","url","receiver","axios","get","headers","then","response","_response$data$","_response$data$2","_response$data$3","data","value","reverse","catch","error","useEffect","date","Date","input1","setInput1","input2","setInput2","_jsxs","_Fragment","CForm","className","style","paddingBottom","paddingTop","CCol","xs","CFormLabel","htmlFor","CInputGroup","CInputGroupText","CFormInput","id","placeholder","onChange","e","target","CButton","type","onClick","preventDefault","dataToSend","concat","publish","payload","err","CCard","CCardBody","CRow","sm","feed_key","substring","color","CIcon","icon","cilCloudDownload","CChartLine","height","marginTop","labels","map","temp","created_at","datasets","label","backgroundColor","hexToRgba","getStyle","borderColor","pointHoverBackgroundColor","borderWidth","fill","maintainAspectRatio","plugins","legend","display","scales","x","grid","drawOnChartArea","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","max","y","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth"],"sourceRoot":""}